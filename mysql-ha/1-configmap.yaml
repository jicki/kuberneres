apiVersion: v1
kind: ConfigMap
metadata:
  name: mycnf
  namespace: mysql-ha
  labels:
    app: mysql
data:  
  mysql.cnf: |
    [client]
    port                    	= 3306
    # 客户端默认字符编码
    default-character-set 		= utf8mb4
    [mysql]
    # MySQL 命令自动补全
    no-auto-rehash
    port 				              = 3306
    # 配置 登录 mysql client 后的提示符.
    prompt 				            = [MySQL][\\d]>\\_
    # 服务端默认字符编码
    default-character-set 		= utf8mb4

    [mysqldump]
    # 在事务中备份数据, 事务隔离级别设置成 Repeatable Read.
    single-transaction

    [mysqld]
    # 设置默认存储引擎
    default-storage-engine  	= InnoDB
    # FALSE 客户端字符集和服务端字符集不同的时候将拒绝连接到服务端执行任何操作
    character-set-client-handshake 	= FALSE
    # 声明服务端的字符编码
    character-set-server 		  = utf8mb4
    # 声明服务端的字符集
    collation-server 		      = utf8mb4_unicode_ci
    # 客户端连接后 初始化执行的语句
    init_connect			        = 'SET NAMES utf8mb4'
    # 关闭 ssl 连接
    skip-ssl
    # 错误日志记录级别 1.错误信息 2.错误信息和告警信息 3.错误信息、告警信息和通知信息
    log_error_verbosity 		  = 2
    # STRICT_TRANS_TABLES 事务型表操作，插入表时如果第一行数据不符合约束则终止执行并回滚.
    # NO_ENGINE_SUBSTITUTION 强制约束存储引擎与默认存储引擎相同, 否则报错
    # NO_ZERO_DATE  禁止插入 '0000-00-00' 日期
    # NO_ZERO_IN_DATE 禁止插入 '年-月-日' 中任何一项为 00 的日期
    # ERROR_FOR_DIVISION_BY_ZERO 禁止 除数为 0 如: 10/0
    # NO_AUTO_CREATE_USER 禁止使用 Grant 创建空密码的用户
    sql_mode 			            = "STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER"
    # 忽略大小写
    lower_case_table_names      = 1
    # binlog 日志模式 ROW - 产生大量二进制日志(建议同步时使用)  MIXED - 混合模式
    binlog_format 			      = ROW
    # 数据库事务隔离级别 READ-COMMITTED - 读取提交内容
    transaction_isolation 		= READ-COMMITTED
    # TIMESTAMP 类型 not null 属性时的数据可以为 null 值
    explicit_defaults_for_timestamp = true
    # 开启事件调度器, 既计划任务
    event_scheduler 		      = 1
    # 开启从库 binlog 记录主库同步的操作日志
    log_slave_updates
    # 数据库实例的唯一标识
    # server-id 			          = 101
    # 关闭一个交互的连接之前所要等待的秒数 默认 28800 秒
    interactive_timeout 		  = 28800
    # 关闭一个非交互的连接之前所要等待的秒数 默认 28800 秒
    wait_timeout 			        = 28800
    # 获取 MDL 锁的等待时间  默认 31536000 秒
    lock_wait_timeout 		    = 1800
    # 禁用DNS主机名查找
    skip_name_resolve 	    	= 1
    # MySQL 最大连接数
    max_connections 		      = 500
    # 设置所有用户在同一时间连接MySQL实例的最大连接数限制
    max_user_connections		  = 498
    # 限制同一个host最大错误连接数, 超过会被屏蔽
    max_connect_errors 		    = 1000000
    # MySQL 最大接受的单个数据包大小, 超过限制后写入数据库失败，且后续记录写入也将失败
    max_allowed_packet 		    = 200M
    # 打开 文件描述符 数量
    open_files_limit 		      = 65535
    # MySQL 的连接数达到 max_connections 时，新来的请求将会被存在 back_log 堆栈中
    back_log 			            = 1024
    # 线程缓存数, 当客户端断开后 此客户的线程将会缓存起来以响应下一个客户而不是销毁
    thread_cache_size		      = 512
    # 数据表 高速缓存的大小 当 MySQL 访问一个表时被打开并放入其中，这样可以更快地访问表内容
    table_open_cache		      = 1024
    # 数据表 高速缓存句柄的分区个数
    table_open_cache_instances	= 64
    # 关闭查询缓存结果
    query_cache_type		      = 0
    query_cache_size		      = 0
    # 内存临时表最大值, 每个线程都会分配, 超出了限制 MySQL 会自动转化为磁盘的MyISAM表, 存储在 tmpdir 目录下
    tmp_table_size 			      = 64M
    # 开启慢查询日志
    slow_query_log 			      = 1
    # 记录未使用索引的语句
    log_queries_not_using_indexes 	= 0
    # 慢查询中记录那些慢的 optimize table、analyze table和 alter table 语句
    log_slow_admin_statements 	= 1
    # 记录由 Slave 所产生的慢查询
    log_slow_slave_statements 	= 1
    # 日志自动过期清理天数
    expire_logs_days 		      = 3
    # 设置记录慢查询超时时间
    long_query_time 		      = 1
    # 查询/检查 返回少于该参数指定行的SQL不被记录到慢查询日志
    min_examined_row_limit 		= 100
    # 记录用户的原始SQL 用于 binlog_format 为 ROW 模式
    binlog-rows-query-log-events 	= 1


    ########Thread settings########
    # pool-of-threads 为启动线程池 (MySQL 社区版不支持线程池)
    #thread_handling			      = pool-of-threads
    # 每个线程池最大线程数
    #thread_pool_oversubscribe	= 20
    # 额外的连接数, 防止线程池满的情况下无法登录 MySQL
    #extra_max_connections 		= 8
    # 管理端口
    #extra_port 			          = 33333
    ########Thread settings########

    ########Innodb settings########
    # InnoDB 每个数据页大小
    innodb_page_size 		      = 16384
    # 缓存 InnoDB 表的索引，数据，插入数据时的缓冲
    innodb_buffer_pool_size 	= 600M
    # 开启多个内存缓冲池，把需要缓冲的数据hash到不同的缓冲池中，这样可以并行的内存读写
    innodb_buffer_pool_instances 	= 4
    # 启动 MySQL 服务时, 将本地热数据加载到InnoDB缓冲池中
    innodb_buffer_pool_load_at_startup = 1
    # 停止 MySQL 服务时，InnoDB将InnoDB缓冲池中的热数据保存到本地硬盘
    innodb_buffer_pool_dump_at_shutdown = 1
    # innodb 数据主目录
    innodb_data_home_dir        = ./
    # 自定义数据文件的路径与大小
    innodb_data_file_path 		= ibdata1:100M:autoextend
    # innodb 日志组的目录
    innodb_log_group_home_dir   = /var/lib/mysql
    # 事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败
    innodb_lock_wait_timeout 	= 10
    # InnoDB 每秒在后台执行多少操作. 大多数写IO(除了写InnoDB日志)是后台操作的
    # innodb_io_capacity 		    = 10000
    # innodb_io_capacity_max 		= 20000

    # InnoDB存储引擎在刷新一个脏页时，会检测该页所在区的所有页，如果是脏页，那么一起刷新
    # innodb_flush_neighbors 		= 1

    # InnoDB 日志文件大小
    innodb_log_file_size 		  = 1G
    # 每 innodb_flush_log_at_timeout 秒一次的频率刷新 redo log
    innodb_flush_log_at_trx_commit 	= 2
    # 当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘
    sync_binlog 			        = 1000
    # 增加IO读写的线程 默认为 4
    innodb_write_io_threads 	= 2
    innodb_read_io_threads 		= 2
    # InnoDB 的 purge 操作被分离到几个 purge 线程中
    innodb_purge_threads 		  = 2
    # 使每个Innodb的表，有自已独立的表空间, 删除表后可以回收那部分空间
    innodb_file_per_table 		= 1
    # InnoDB 数据文件及redo log的打开、刷写模式, 用fsync()函数去更新日志和数据文件
    innodb_flush_method 		  = O_DIRECT
    # 创建的 undo 表空间的个数
    innodb_undo_tablespaces 	= 2
    # redoLog 文件数, redoLog文件内容是循环覆盖写入
    innodb_log_files_in_group = 2
    # InnoDB 将日志写入磁盘文件前的 缓冲大小
    innodb_log_buffer_size 		= 8M
    # InnoDB kernel 并发最大的线程数，默认0 情况下不限制线程并发执行的数量
    innodb_thread_concurrency 	= 0
    # 将死锁相关信息保存到 MySQL 错误日志中
    innodb_print_all_deadlocks 	= 1
    # InnoDB ANALYZE TABLE 更新 Cardinality 值时每次采样页的数量 默认值为 20
    innodb_stats_persistent_sample_pages = 20
    # InnoDB auto_increment 列的表插入数据时，相关锁的行为 2 表示 interleaved 交错
    innodb_autoinc_lock_mode 	= 2
    # InnoDB 表做在线DDL操作时所使用的临时日志文件的最大大小 默认128M
    innodb_online_alter_log_max_size = 128M
    # 限制 InnoDB 能打开的表的数量
    innodb_open_files         = 4096

    ########replication settings########
    log_bin                     = mysql-bin
    # 从库 保存主节点信息方式 TABLE 信息就存在从库 mysql.master_slave_info 表中
    master_info_repository 		= TABLE
    # 保存 Slave 读取 relay log 的位置信息 TABLE 保存于 表中,  FILE 保存于文件
    relay_log_info_repository = TABLE
    # 启用 GTID 类型，否则就是普通的复制架构
    gtid_mode 			          = on
    # 强制 GTID 的一致性
    enforce_gtid_consistency 	= 1
    # 从库 保存同步中继日志的位置
    relay_log 			          = relay.log
    # 当 Slave 从库宕机后，假如 relay log损坏, 则自动放弃所有未执行的 relay-log，重新从 master上获取日志.
    relay_log_recovery 		    = 1
    # 同步时 跳过指定 error no 类型的错误
    slave_skip_errors 		    = ddl_exist_errors
    # 无主键数据扫描延迟优化
    slave_rows_search_algorithms 	= 'INDEX_SCAN,HASH_SCAN'

    ########semi sync replication settings########
    # 加载插件
    # plugin_load 			        = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
    # loose_rpl_semi_sync_master_enabled  = 1
    # loose_rpl_semi_sync_master_timeout  = 3000
    # loose_rpl_semi_sync_slave_enabled   = 1

    [mysqld-5.7]
    # new innodb settings #

    # 转储每个bp instance LRU上最热的page的百分比
    innodb_buffer_pool_dump_pct 	= 40
    # 并行刷脏 既 一个协调线程 + 多个工作线程
    innodb_page_cleaners 		= 16
    # 开启在线回收（收缩）undo log 日志文件
    innodb_undo_log_truncate 	= 1
    # 回收最大值 超过该值会触发truncate回收（收缩）动作，truncate后空间缩小到10M
    innodb_max_undo_log_size 	= 2G
    # 回收（收缩）undo log 的频率
    innodb_purge_rseg_truncate_frequency = 128

    # new replication settings #
    # 并行复制在 Slave 端配置
    # 并行复制, LOGICAL_CLOCK 基于组提交的并行复制方式
    slave_parallel_type 		= LOGICAL_CLOCK
    # 并行复制的线程数
    slave_parallel_workers 		= 16
    # 保证事务是按照 relay log 中记录的顺序来回放
    slave_preserve_commit_order	= 1
    # sql 线程由于死锁或事务执行超时 导致执行事务失败, 复制停止前重试次数.
    slave_transaction_retries	= 128

    # other change settings #
    # MySQL 启动或重启时, 控制搜寻 GTIDs 时是如何迭代使用binlog文件的
    binlog_gtid_simple_recovery	= 1
    # 控制 error log、genera log，等等记录日志的显示时间参数
    log_timestamps			= system
    # 兼容 information_schema.global_status
    show_compatibility_56		= on
